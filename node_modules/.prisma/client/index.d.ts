
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model musics
 * 
 */
export type musics = {
  id: number
  name: string
  duration: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model musicsPlaylists
 * 
 */
export type musicsPlaylists = {
  id: number
  playlistId: number
  musicsId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model playlists
 * 
 */
export type playlists = {
  id: number
  userId: number
  name: string
  duration: number
  image: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model sessions
 * 
 */
export type sessions = {
  id: number
  userId: number
  token: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model users
 * 
 */
export type users = {
  id: number
  email: string
  passwordHash: string
  createdAt: Date
  updatedAt: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Musics
 * const musics = await prisma.musics.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Musics
   * const musics = await prisma.musics.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.musics`: Exposes CRUD operations for the **musics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Musics
    * const musics = await prisma.musics.findMany()
    * ```
    */
  get musics(): Prisma.musicsDelegate<GlobalReject>;

  /**
   * `prisma.musicsPlaylists`: Exposes CRUD operations for the **musicsPlaylists** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MusicsPlaylists
    * const musicsPlaylists = await prisma.musicsPlaylists.findMany()
    * ```
    */
  get musicsPlaylists(): Prisma.musicsPlaylistsDelegate<GlobalReject>;

  /**
   * `prisma.playlists`: Exposes CRUD operations for the **playlists** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Playlists
    * const playlists = await prisma.playlists.findMany()
    * ```
    */
  get playlists(): Prisma.playlistsDelegate<GlobalReject>;

  /**
   * `prisma.sessions`: Exposes CRUD operations for the **sessions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.sessions.findMany()
    * ```
    */
  get sessions(): Prisma.sessionsDelegate<GlobalReject>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Prisma Client JS version: 3.15.2
   * Query Engine version: 461d6a05159055555eb7dfb337c9fb271cbd4d7e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    musics: 'musics',
    musicsPlaylists: 'musicsPlaylists',
    playlists: 'playlists',
    sessions: 'sessions',
    users: 'users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type MusicsCountOutputType
   */


  export type MusicsCountOutputType = {
    musicsPlaylists: number
  }

  export type MusicsCountOutputTypeSelect = {
    musicsPlaylists?: boolean
  }

  export type MusicsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | MusicsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? MusicsCountOutputType
    : S extends undefined
    ? never
    : S extends MusicsCountOutputTypeArgs
    ?'include' extends U
    ? MusicsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof MusicsCountOutputType ? MusicsCountOutputType[P] : never
  } 
    : MusicsCountOutputType
  : MusicsCountOutputType




  // Custom InputTypes

  /**
   * MusicsCountOutputType without action
   */
  export type MusicsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the MusicsCountOutputType
     * 
    **/
    select?: MusicsCountOutputTypeSelect | null
  }



  /**
   * Count Type PlaylistsCountOutputType
   */


  export type PlaylistsCountOutputType = {
    musicsPlaylists: number
  }

  export type PlaylistsCountOutputTypeSelect = {
    musicsPlaylists?: boolean
  }

  export type PlaylistsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | PlaylistsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? PlaylistsCountOutputType
    : S extends undefined
    ? never
    : S extends PlaylistsCountOutputTypeArgs
    ?'include' extends U
    ? PlaylistsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof PlaylistsCountOutputType ? PlaylistsCountOutputType[P] : never
  } 
    : PlaylistsCountOutputType
  : PlaylistsCountOutputType




  // Custom InputTypes

  /**
   * PlaylistsCountOutputType without action
   */
  export type PlaylistsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PlaylistsCountOutputType
     * 
    **/
    select?: PlaylistsCountOutputTypeSelect | null
  }



  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    playlists: number
    sessions: number
  }

  export type UsersCountOutputTypeSelect = {
    playlists?: boolean
    sessions?: boolean
  }

  export type UsersCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UsersCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UsersCountOutputType
    : S extends undefined
    ? never
    : S extends UsersCountOutputTypeArgs
    ?'include' extends U
    ? UsersCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UsersCountOutputType ? UsersCountOutputType[P] : never
  } 
    : UsersCountOutputType
  : UsersCountOutputType




  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     * 
    **/
    select?: UsersCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model musics
   */


  export type AggregateMusics = {
    _count: MusicsCountAggregateOutputType | null
    _avg: MusicsAvgAggregateOutputType | null
    _sum: MusicsSumAggregateOutputType | null
    _min: MusicsMinAggregateOutputType | null
    _max: MusicsMaxAggregateOutputType | null
  }

  export type MusicsAvgAggregateOutputType = {
    id: number | null
    duration: number | null
  }

  export type MusicsSumAggregateOutputType = {
    id: number | null
    duration: number | null
  }

  export type MusicsMinAggregateOutputType = {
    id: number | null
    name: string | null
    duration: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MusicsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    duration: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MusicsCountAggregateOutputType = {
    id: number
    name: number
    duration: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MusicsAvgAggregateInputType = {
    id?: true
    duration?: true
  }

  export type MusicsSumAggregateInputType = {
    id?: true
    duration?: true
  }

  export type MusicsMinAggregateInputType = {
    id?: true
    name?: true
    duration?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MusicsMaxAggregateInputType = {
    id?: true
    name?: true
    duration?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MusicsCountAggregateInputType = {
    id?: true
    name?: true
    duration?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MusicsAggregateArgs = {
    /**
     * Filter which musics to aggregate.
     * 
    **/
    where?: musicsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of musics to fetch.
     * 
    **/
    orderBy?: Enumerable<musicsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: musicsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` musics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` musics.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned musics
    **/
    _count?: true | MusicsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MusicsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MusicsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MusicsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MusicsMaxAggregateInputType
  }

  export type GetMusicsAggregateType<T extends MusicsAggregateArgs> = {
        [P in keyof T & keyof AggregateMusics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMusics[P]>
      : GetScalarType<T[P], AggregateMusics[P]>
  }




  export type MusicsGroupByArgs = {
    where?: musicsWhereInput
    orderBy?: Enumerable<musicsOrderByWithAggregationInput>
    by: Array<MusicsScalarFieldEnum>
    having?: musicsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MusicsCountAggregateInputType | true
    _avg?: MusicsAvgAggregateInputType
    _sum?: MusicsSumAggregateInputType
    _min?: MusicsMinAggregateInputType
    _max?: MusicsMaxAggregateInputType
  }


  export type MusicsGroupByOutputType = {
    id: number
    name: string
    duration: number
    createdAt: Date
    updatedAt: Date
    _count: MusicsCountAggregateOutputType | null
    _avg: MusicsAvgAggregateOutputType | null
    _sum: MusicsSumAggregateOutputType | null
    _min: MusicsMinAggregateOutputType | null
    _max: MusicsMaxAggregateOutputType | null
  }

  type GetMusicsGroupByPayload<T extends MusicsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MusicsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MusicsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MusicsGroupByOutputType[P]>
            : GetScalarType<T[P], MusicsGroupByOutputType[P]>
        }
      >
    >


  export type musicsSelect = {
    id?: boolean
    name?: boolean
    duration?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    musicsPlaylists?: boolean | musicsPlaylistsFindManyArgs
    _count?: boolean | MusicsCountOutputTypeArgs
  }

  export type musicsInclude = {
    musicsPlaylists?: boolean | musicsPlaylistsFindManyArgs
    _count?: boolean | MusicsCountOutputTypeArgs
  }

  export type musicsGetPayload<
    S extends boolean | null | undefined | musicsArgs,
    U = keyof S
      > = S extends true
        ? musics
    : S extends undefined
    ? never
    : S extends musicsArgs | musicsFindManyArgs
    ?'include' extends U
    ? musics  & {
    [P in TrueKeys<S['include']>]:
        P extends 'musicsPlaylists' ? Array < musicsPlaylistsGetPayload<S['include'][P]>>  :
        P extends '_count' ? MusicsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'musicsPlaylists' ? Array < musicsPlaylistsGetPayload<S['select'][P]>>  :
        P extends '_count' ? MusicsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof musics ? musics[P] : never
  } 
    : musics
  : musics


  type musicsCountArgs = Merge<
    Omit<musicsFindManyArgs, 'select' | 'include'> & {
      select?: MusicsCountAggregateInputType | true
    }
  >

  export interface musicsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Musics that matches the filter.
     * @param {musicsFindUniqueArgs} args - Arguments to find a Musics
     * @example
     * // Get one Musics
     * const musics = await prisma.musics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends musicsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, musicsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'musics'> extends True ? CheckSelect<T, Prisma__musicsClient<musics>, Prisma__musicsClient<musicsGetPayload<T>>> : CheckSelect<T, Prisma__musicsClient<musics | null >, Prisma__musicsClient<musicsGetPayload<T> | null >>

    /**
     * Find the first Musics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {musicsFindFirstArgs} args - Arguments to find a Musics
     * @example
     * // Get one Musics
     * const musics = await prisma.musics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends musicsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, musicsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'musics'> extends True ? CheckSelect<T, Prisma__musicsClient<musics>, Prisma__musicsClient<musicsGetPayload<T>>> : CheckSelect<T, Prisma__musicsClient<musics | null >, Prisma__musicsClient<musicsGetPayload<T> | null >>

    /**
     * Find zero or more Musics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {musicsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Musics
     * const musics = await prisma.musics.findMany()
     * 
     * // Get first 10 Musics
     * const musics = await prisma.musics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const musicsWithIdOnly = await prisma.musics.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends musicsFindManyArgs>(
      args?: SelectSubset<T, musicsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<musics>>, PrismaPromise<Array<musicsGetPayload<T>>>>

    /**
     * Create a Musics.
     * @param {musicsCreateArgs} args - Arguments to create a Musics.
     * @example
     * // Create one Musics
     * const Musics = await prisma.musics.create({
     *   data: {
     *     // ... data to create a Musics
     *   }
     * })
     * 
    **/
    create<T extends musicsCreateArgs>(
      args: SelectSubset<T, musicsCreateArgs>
    ): CheckSelect<T, Prisma__musicsClient<musics>, Prisma__musicsClient<musicsGetPayload<T>>>

    /**
     * Create many Musics.
     *     @param {musicsCreateManyArgs} args - Arguments to create many Musics.
     *     @example
     *     // Create many Musics
     *     const musics = await prisma.musics.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends musicsCreateManyArgs>(
      args?: SelectSubset<T, musicsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Musics.
     * @param {musicsDeleteArgs} args - Arguments to delete one Musics.
     * @example
     * // Delete one Musics
     * const Musics = await prisma.musics.delete({
     *   where: {
     *     // ... filter to delete one Musics
     *   }
     * })
     * 
    **/
    delete<T extends musicsDeleteArgs>(
      args: SelectSubset<T, musicsDeleteArgs>
    ): CheckSelect<T, Prisma__musicsClient<musics>, Prisma__musicsClient<musicsGetPayload<T>>>

    /**
     * Update one Musics.
     * @param {musicsUpdateArgs} args - Arguments to update one Musics.
     * @example
     * // Update one Musics
     * const musics = await prisma.musics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends musicsUpdateArgs>(
      args: SelectSubset<T, musicsUpdateArgs>
    ): CheckSelect<T, Prisma__musicsClient<musics>, Prisma__musicsClient<musicsGetPayload<T>>>

    /**
     * Delete zero or more Musics.
     * @param {musicsDeleteManyArgs} args - Arguments to filter Musics to delete.
     * @example
     * // Delete a few Musics
     * const { count } = await prisma.musics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends musicsDeleteManyArgs>(
      args?: SelectSubset<T, musicsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Musics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {musicsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Musics
     * const musics = await prisma.musics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends musicsUpdateManyArgs>(
      args: SelectSubset<T, musicsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Musics.
     * @param {musicsUpsertArgs} args - Arguments to update or create a Musics.
     * @example
     * // Update or create a Musics
     * const musics = await prisma.musics.upsert({
     *   create: {
     *     // ... data to create a Musics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Musics we want to update
     *   }
     * })
    **/
    upsert<T extends musicsUpsertArgs>(
      args: SelectSubset<T, musicsUpsertArgs>
    ): CheckSelect<T, Prisma__musicsClient<musics>, Prisma__musicsClient<musicsGetPayload<T>>>

    /**
     * Count the number of Musics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {musicsCountArgs} args - Arguments to filter Musics to count.
     * @example
     * // Count the number of Musics
     * const count = await prisma.musics.count({
     *   where: {
     *     // ... the filter for the Musics we want to count
     *   }
     * })
    **/
    count<T extends musicsCountArgs>(
      args?: Subset<T, musicsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MusicsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Musics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MusicsAggregateArgs>(args: Subset<T, MusicsAggregateArgs>): PrismaPromise<GetMusicsAggregateType<T>>

    /**
     * Group by Musics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MusicsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MusicsGroupByArgs['orderBy'] }
        : { orderBy?: MusicsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MusicsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMusicsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for musics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__musicsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    musicsPlaylists<T extends musicsPlaylistsFindManyArgs = {}>(args?: Subset<T, musicsPlaylistsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<musicsPlaylists>>, PrismaPromise<Array<musicsPlaylistsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * musics findUnique
   */
  export type musicsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the musics
     * 
    **/
    select?: musicsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: musicsInclude | null
    /**
     * Throw an Error if a musics can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which musics to fetch.
     * 
    **/
    where: musicsWhereUniqueInput
  }


  /**
   * musics findFirst
   */
  export type musicsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the musics
     * 
    **/
    select?: musicsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: musicsInclude | null
    /**
     * Throw an Error if a musics can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which musics to fetch.
     * 
    **/
    where?: musicsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of musics to fetch.
     * 
    **/
    orderBy?: Enumerable<musicsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for musics.
     * 
    **/
    cursor?: musicsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` musics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` musics.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of musics.
     * 
    **/
    distinct?: Enumerable<MusicsScalarFieldEnum>
  }


  /**
   * musics findMany
   */
  export type musicsFindManyArgs = {
    /**
     * Select specific fields to fetch from the musics
     * 
    **/
    select?: musicsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: musicsInclude | null
    /**
     * Filter, which musics to fetch.
     * 
    **/
    where?: musicsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of musics to fetch.
     * 
    **/
    orderBy?: Enumerable<musicsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing musics.
     * 
    **/
    cursor?: musicsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` musics from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` musics.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MusicsScalarFieldEnum>
  }


  /**
   * musics create
   */
  export type musicsCreateArgs = {
    /**
     * Select specific fields to fetch from the musics
     * 
    **/
    select?: musicsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: musicsInclude | null
    /**
     * The data needed to create a musics.
     * 
    **/
    data: XOR<musicsCreateInput, musicsUncheckedCreateInput>
  }


  /**
   * musics createMany
   */
  export type musicsCreateManyArgs = {
    /**
     * The data used to create many musics.
     * 
    **/
    data: Enumerable<musicsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * musics update
   */
  export type musicsUpdateArgs = {
    /**
     * Select specific fields to fetch from the musics
     * 
    **/
    select?: musicsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: musicsInclude | null
    /**
     * The data needed to update a musics.
     * 
    **/
    data: XOR<musicsUpdateInput, musicsUncheckedUpdateInput>
    /**
     * Choose, which musics to update.
     * 
    **/
    where: musicsWhereUniqueInput
  }


  /**
   * musics updateMany
   */
  export type musicsUpdateManyArgs = {
    /**
     * The data used to update musics.
     * 
    **/
    data: XOR<musicsUpdateManyMutationInput, musicsUncheckedUpdateManyInput>
    /**
     * Filter which musics to update
     * 
    **/
    where?: musicsWhereInput
  }


  /**
   * musics upsert
   */
  export type musicsUpsertArgs = {
    /**
     * Select specific fields to fetch from the musics
     * 
    **/
    select?: musicsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: musicsInclude | null
    /**
     * The filter to search for the musics to update in case it exists.
     * 
    **/
    where: musicsWhereUniqueInput
    /**
     * In case the musics found by the `where` argument doesn't exist, create a new musics with this data.
     * 
    **/
    create: XOR<musicsCreateInput, musicsUncheckedCreateInput>
    /**
     * In case the musics was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<musicsUpdateInput, musicsUncheckedUpdateInput>
  }


  /**
   * musics delete
   */
  export type musicsDeleteArgs = {
    /**
     * Select specific fields to fetch from the musics
     * 
    **/
    select?: musicsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: musicsInclude | null
    /**
     * Filter which musics to delete.
     * 
    **/
    where: musicsWhereUniqueInput
  }


  /**
   * musics deleteMany
   */
  export type musicsDeleteManyArgs = {
    /**
     * Filter which musics to delete
     * 
    **/
    where?: musicsWhereInput
  }


  /**
   * musics without action
   */
  export type musicsArgs = {
    /**
     * Select specific fields to fetch from the musics
     * 
    **/
    select?: musicsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: musicsInclude | null
  }



  /**
   * Model musicsPlaylists
   */


  export type AggregateMusicsPlaylists = {
    _count: MusicsPlaylistsCountAggregateOutputType | null
    _avg: MusicsPlaylistsAvgAggregateOutputType | null
    _sum: MusicsPlaylistsSumAggregateOutputType | null
    _min: MusicsPlaylistsMinAggregateOutputType | null
    _max: MusicsPlaylistsMaxAggregateOutputType | null
  }

  export type MusicsPlaylistsAvgAggregateOutputType = {
    id: number | null
    playlistId: number | null
    musicsId: number | null
  }

  export type MusicsPlaylistsSumAggregateOutputType = {
    id: number | null
    playlistId: number | null
    musicsId: number | null
  }

  export type MusicsPlaylistsMinAggregateOutputType = {
    id: number | null
    playlistId: number | null
    musicsId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MusicsPlaylistsMaxAggregateOutputType = {
    id: number | null
    playlistId: number | null
    musicsId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MusicsPlaylistsCountAggregateOutputType = {
    id: number
    playlistId: number
    musicsId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MusicsPlaylistsAvgAggregateInputType = {
    id?: true
    playlistId?: true
    musicsId?: true
  }

  export type MusicsPlaylistsSumAggregateInputType = {
    id?: true
    playlistId?: true
    musicsId?: true
  }

  export type MusicsPlaylistsMinAggregateInputType = {
    id?: true
    playlistId?: true
    musicsId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MusicsPlaylistsMaxAggregateInputType = {
    id?: true
    playlistId?: true
    musicsId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MusicsPlaylistsCountAggregateInputType = {
    id?: true
    playlistId?: true
    musicsId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MusicsPlaylistsAggregateArgs = {
    /**
     * Filter which musicsPlaylists to aggregate.
     * 
    **/
    where?: musicsPlaylistsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of musicsPlaylists to fetch.
     * 
    **/
    orderBy?: Enumerable<musicsPlaylistsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: musicsPlaylistsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` musicsPlaylists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` musicsPlaylists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned musicsPlaylists
    **/
    _count?: true | MusicsPlaylistsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MusicsPlaylistsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MusicsPlaylistsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MusicsPlaylistsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MusicsPlaylistsMaxAggregateInputType
  }

  export type GetMusicsPlaylistsAggregateType<T extends MusicsPlaylistsAggregateArgs> = {
        [P in keyof T & keyof AggregateMusicsPlaylists]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMusicsPlaylists[P]>
      : GetScalarType<T[P], AggregateMusicsPlaylists[P]>
  }




  export type MusicsPlaylistsGroupByArgs = {
    where?: musicsPlaylistsWhereInput
    orderBy?: Enumerable<musicsPlaylistsOrderByWithAggregationInput>
    by: Array<MusicsPlaylistsScalarFieldEnum>
    having?: musicsPlaylistsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MusicsPlaylistsCountAggregateInputType | true
    _avg?: MusicsPlaylistsAvgAggregateInputType
    _sum?: MusicsPlaylistsSumAggregateInputType
    _min?: MusicsPlaylistsMinAggregateInputType
    _max?: MusicsPlaylistsMaxAggregateInputType
  }


  export type MusicsPlaylistsGroupByOutputType = {
    id: number
    playlistId: number
    musicsId: number
    createdAt: Date
    updatedAt: Date
    _count: MusicsPlaylistsCountAggregateOutputType | null
    _avg: MusicsPlaylistsAvgAggregateOutputType | null
    _sum: MusicsPlaylistsSumAggregateOutputType | null
    _min: MusicsPlaylistsMinAggregateOutputType | null
    _max: MusicsPlaylistsMaxAggregateOutputType | null
  }

  type GetMusicsPlaylistsGroupByPayload<T extends MusicsPlaylistsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MusicsPlaylistsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MusicsPlaylistsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MusicsPlaylistsGroupByOutputType[P]>
            : GetScalarType<T[P], MusicsPlaylistsGroupByOutputType[P]>
        }
      >
    >


  export type musicsPlaylistsSelect = {
    id?: boolean
    playlistId?: boolean
    musicsId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    musics?: boolean | musicsArgs
    playlists?: boolean | playlistsArgs
  }

  export type musicsPlaylistsInclude = {
    musics?: boolean | musicsArgs
    playlists?: boolean | playlistsArgs
  }

  export type musicsPlaylistsGetPayload<
    S extends boolean | null | undefined | musicsPlaylistsArgs,
    U = keyof S
      > = S extends true
        ? musicsPlaylists
    : S extends undefined
    ? never
    : S extends musicsPlaylistsArgs | musicsPlaylistsFindManyArgs
    ?'include' extends U
    ? musicsPlaylists  & {
    [P in TrueKeys<S['include']>]:
        P extends 'musics' ? musicsGetPayload<S['include'][P]> :
        P extends 'playlists' ? playlistsGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'musics' ? musicsGetPayload<S['select'][P]> :
        P extends 'playlists' ? playlistsGetPayload<S['select'][P]> :  P extends keyof musicsPlaylists ? musicsPlaylists[P] : never
  } 
    : musicsPlaylists
  : musicsPlaylists


  type musicsPlaylistsCountArgs = Merge<
    Omit<musicsPlaylistsFindManyArgs, 'select' | 'include'> & {
      select?: MusicsPlaylistsCountAggregateInputType | true
    }
  >

  export interface musicsPlaylistsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one MusicsPlaylists that matches the filter.
     * @param {musicsPlaylistsFindUniqueArgs} args - Arguments to find a MusicsPlaylists
     * @example
     * // Get one MusicsPlaylists
     * const musicsPlaylists = await prisma.musicsPlaylists.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends musicsPlaylistsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, musicsPlaylistsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'musicsPlaylists'> extends True ? CheckSelect<T, Prisma__musicsPlaylistsClient<musicsPlaylists>, Prisma__musicsPlaylistsClient<musicsPlaylistsGetPayload<T>>> : CheckSelect<T, Prisma__musicsPlaylistsClient<musicsPlaylists | null >, Prisma__musicsPlaylistsClient<musicsPlaylistsGetPayload<T> | null >>

    /**
     * Find the first MusicsPlaylists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {musicsPlaylistsFindFirstArgs} args - Arguments to find a MusicsPlaylists
     * @example
     * // Get one MusicsPlaylists
     * const musicsPlaylists = await prisma.musicsPlaylists.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends musicsPlaylistsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, musicsPlaylistsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'musicsPlaylists'> extends True ? CheckSelect<T, Prisma__musicsPlaylistsClient<musicsPlaylists>, Prisma__musicsPlaylistsClient<musicsPlaylistsGetPayload<T>>> : CheckSelect<T, Prisma__musicsPlaylistsClient<musicsPlaylists | null >, Prisma__musicsPlaylistsClient<musicsPlaylistsGetPayload<T> | null >>

    /**
     * Find zero or more MusicsPlaylists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {musicsPlaylistsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MusicsPlaylists
     * const musicsPlaylists = await prisma.musicsPlaylists.findMany()
     * 
     * // Get first 10 MusicsPlaylists
     * const musicsPlaylists = await prisma.musicsPlaylists.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const musicsPlaylistsWithIdOnly = await prisma.musicsPlaylists.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends musicsPlaylistsFindManyArgs>(
      args?: SelectSubset<T, musicsPlaylistsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<musicsPlaylists>>, PrismaPromise<Array<musicsPlaylistsGetPayload<T>>>>

    /**
     * Create a MusicsPlaylists.
     * @param {musicsPlaylistsCreateArgs} args - Arguments to create a MusicsPlaylists.
     * @example
     * // Create one MusicsPlaylists
     * const MusicsPlaylists = await prisma.musicsPlaylists.create({
     *   data: {
     *     // ... data to create a MusicsPlaylists
     *   }
     * })
     * 
    **/
    create<T extends musicsPlaylistsCreateArgs>(
      args: SelectSubset<T, musicsPlaylistsCreateArgs>
    ): CheckSelect<T, Prisma__musicsPlaylistsClient<musicsPlaylists>, Prisma__musicsPlaylistsClient<musicsPlaylistsGetPayload<T>>>

    /**
     * Create many MusicsPlaylists.
     *     @param {musicsPlaylistsCreateManyArgs} args - Arguments to create many MusicsPlaylists.
     *     @example
     *     // Create many MusicsPlaylists
     *     const musicsPlaylists = await prisma.musicsPlaylists.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends musicsPlaylistsCreateManyArgs>(
      args?: SelectSubset<T, musicsPlaylistsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a MusicsPlaylists.
     * @param {musicsPlaylistsDeleteArgs} args - Arguments to delete one MusicsPlaylists.
     * @example
     * // Delete one MusicsPlaylists
     * const MusicsPlaylists = await prisma.musicsPlaylists.delete({
     *   where: {
     *     // ... filter to delete one MusicsPlaylists
     *   }
     * })
     * 
    **/
    delete<T extends musicsPlaylistsDeleteArgs>(
      args: SelectSubset<T, musicsPlaylistsDeleteArgs>
    ): CheckSelect<T, Prisma__musicsPlaylistsClient<musicsPlaylists>, Prisma__musicsPlaylistsClient<musicsPlaylistsGetPayload<T>>>

    /**
     * Update one MusicsPlaylists.
     * @param {musicsPlaylistsUpdateArgs} args - Arguments to update one MusicsPlaylists.
     * @example
     * // Update one MusicsPlaylists
     * const musicsPlaylists = await prisma.musicsPlaylists.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends musicsPlaylistsUpdateArgs>(
      args: SelectSubset<T, musicsPlaylistsUpdateArgs>
    ): CheckSelect<T, Prisma__musicsPlaylistsClient<musicsPlaylists>, Prisma__musicsPlaylistsClient<musicsPlaylistsGetPayload<T>>>

    /**
     * Delete zero or more MusicsPlaylists.
     * @param {musicsPlaylistsDeleteManyArgs} args - Arguments to filter MusicsPlaylists to delete.
     * @example
     * // Delete a few MusicsPlaylists
     * const { count } = await prisma.musicsPlaylists.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends musicsPlaylistsDeleteManyArgs>(
      args?: SelectSubset<T, musicsPlaylistsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more MusicsPlaylists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {musicsPlaylistsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MusicsPlaylists
     * const musicsPlaylists = await prisma.musicsPlaylists.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends musicsPlaylistsUpdateManyArgs>(
      args: SelectSubset<T, musicsPlaylistsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one MusicsPlaylists.
     * @param {musicsPlaylistsUpsertArgs} args - Arguments to update or create a MusicsPlaylists.
     * @example
     * // Update or create a MusicsPlaylists
     * const musicsPlaylists = await prisma.musicsPlaylists.upsert({
     *   create: {
     *     // ... data to create a MusicsPlaylists
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MusicsPlaylists we want to update
     *   }
     * })
    **/
    upsert<T extends musicsPlaylistsUpsertArgs>(
      args: SelectSubset<T, musicsPlaylistsUpsertArgs>
    ): CheckSelect<T, Prisma__musicsPlaylistsClient<musicsPlaylists>, Prisma__musicsPlaylistsClient<musicsPlaylistsGetPayload<T>>>

    /**
     * Count the number of MusicsPlaylists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {musicsPlaylistsCountArgs} args - Arguments to filter MusicsPlaylists to count.
     * @example
     * // Count the number of MusicsPlaylists
     * const count = await prisma.musicsPlaylists.count({
     *   where: {
     *     // ... the filter for the MusicsPlaylists we want to count
     *   }
     * })
    **/
    count<T extends musicsPlaylistsCountArgs>(
      args?: Subset<T, musicsPlaylistsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MusicsPlaylistsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MusicsPlaylists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicsPlaylistsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MusicsPlaylistsAggregateArgs>(args: Subset<T, MusicsPlaylistsAggregateArgs>): PrismaPromise<GetMusicsPlaylistsAggregateType<T>>

    /**
     * Group by MusicsPlaylists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicsPlaylistsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MusicsPlaylistsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MusicsPlaylistsGroupByArgs['orderBy'] }
        : { orderBy?: MusicsPlaylistsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MusicsPlaylistsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMusicsPlaylistsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for musicsPlaylists.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__musicsPlaylistsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    musics<T extends musicsArgs = {}>(args?: Subset<T, musicsArgs>): CheckSelect<T, Prisma__musicsClient<musics | null >, Prisma__musicsClient<musicsGetPayload<T> | null >>;

    playlists<T extends playlistsArgs = {}>(args?: Subset<T, playlistsArgs>): CheckSelect<T, Prisma__playlistsClient<playlists | null >, Prisma__playlistsClient<playlistsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * musicsPlaylists findUnique
   */
  export type musicsPlaylistsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the musicsPlaylists
     * 
    **/
    select?: musicsPlaylistsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: musicsPlaylistsInclude | null
    /**
     * Throw an Error if a musicsPlaylists can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which musicsPlaylists to fetch.
     * 
    **/
    where: musicsPlaylistsWhereUniqueInput
  }


  /**
   * musicsPlaylists findFirst
   */
  export type musicsPlaylistsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the musicsPlaylists
     * 
    **/
    select?: musicsPlaylistsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: musicsPlaylistsInclude | null
    /**
     * Throw an Error if a musicsPlaylists can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which musicsPlaylists to fetch.
     * 
    **/
    where?: musicsPlaylistsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of musicsPlaylists to fetch.
     * 
    **/
    orderBy?: Enumerable<musicsPlaylistsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for musicsPlaylists.
     * 
    **/
    cursor?: musicsPlaylistsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` musicsPlaylists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` musicsPlaylists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of musicsPlaylists.
     * 
    **/
    distinct?: Enumerable<MusicsPlaylistsScalarFieldEnum>
  }


  /**
   * musicsPlaylists findMany
   */
  export type musicsPlaylistsFindManyArgs = {
    /**
     * Select specific fields to fetch from the musicsPlaylists
     * 
    **/
    select?: musicsPlaylistsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: musicsPlaylistsInclude | null
    /**
     * Filter, which musicsPlaylists to fetch.
     * 
    **/
    where?: musicsPlaylistsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of musicsPlaylists to fetch.
     * 
    **/
    orderBy?: Enumerable<musicsPlaylistsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing musicsPlaylists.
     * 
    **/
    cursor?: musicsPlaylistsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` musicsPlaylists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` musicsPlaylists.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MusicsPlaylistsScalarFieldEnum>
  }


  /**
   * musicsPlaylists create
   */
  export type musicsPlaylistsCreateArgs = {
    /**
     * Select specific fields to fetch from the musicsPlaylists
     * 
    **/
    select?: musicsPlaylistsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: musicsPlaylistsInclude | null
    /**
     * The data needed to create a musicsPlaylists.
     * 
    **/
    data: XOR<musicsPlaylistsCreateInput, musicsPlaylistsUncheckedCreateInput>
  }


  /**
   * musicsPlaylists createMany
   */
  export type musicsPlaylistsCreateManyArgs = {
    /**
     * The data used to create many musicsPlaylists.
     * 
    **/
    data: Enumerable<musicsPlaylistsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * musicsPlaylists update
   */
  export type musicsPlaylistsUpdateArgs = {
    /**
     * Select specific fields to fetch from the musicsPlaylists
     * 
    **/
    select?: musicsPlaylistsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: musicsPlaylistsInclude | null
    /**
     * The data needed to update a musicsPlaylists.
     * 
    **/
    data: XOR<musicsPlaylistsUpdateInput, musicsPlaylistsUncheckedUpdateInput>
    /**
     * Choose, which musicsPlaylists to update.
     * 
    **/
    where: musicsPlaylistsWhereUniqueInput
  }


  /**
   * musicsPlaylists updateMany
   */
  export type musicsPlaylistsUpdateManyArgs = {
    /**
     * The data used to update musicsPlaylists.
     * 
    **/
    data: XOR<musicsPlaylistsUpdateManyMutationInput, musicsPlaylistsUncheckedUpdateManyInput>
    /**
     * Filter which musicsPlaylists to update
     * 
    **/
    where?: musicsPlaylistsWhereInput
  }


  /**
   * musicsPlaylists upsert
   */
  export type musicsPlaylistsUpsertArgs = {
    /**
     * Select specific fields to fetch from the musicsPlaylists
     * 
    **/
    select?: musicsPlaylistsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: musicsPlaylistsInclude | null
    /**
     * The filter to search for the musicsPlaylists to update in case it exists.
     * 
    **/
    where: musicsPlaylistsWhereUniqueInput
    /**
     * In case the musicsPlaylists found by the `where` argument doesn't exist, create a new musicsPlaylists with this data.
     * 
    **/
    create: XOR<musicsPlaylistsCreateInput, musicsPlaylistsUncheckedCreateInput>
    /**
     * In case the musicsPlaylists was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<musicsPlaylistsUpdateInput, musicsPlaylistsUncheckedUpdateInput>
  }


  /**
   * musicsPlaylists delete
   */
  export type musicsPlaylistsDeleteArgs = {
    /**
     * Select specific fields to fetch from the musicsPlaylists
     * 
    **/
    select?: musicsPlaylistsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: musicsPlaylistsInclude | null
    /**
     * Filter which musicsPlaylists to delete.
     * 
    **/
    where: musicsPlaylistsWhereUniqueInput
  }


  /**
   * musicsPlaylists deleteMany
   */
  export type musicsPlaylistsDeleteManyArgs = {
    /**
     * Filter which musicsPlaylists to delete
     * 
    **/
    where?: musicsPlaylistsWhereInput
  }


  /**
   * musicsPlaylists without action
   */
  export type musicsPlaylistsArgs = {
    /**
     * Select specific fields to fetch from the musicsPlaylists
     * 
    **/
    select?: musicsPlaylistsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: musicsPlaylistsInclude | null
  }



  /**
   * Model playlists
   */


  export type AggregatePlaylists = {
    _count: PlaylistsCountAggregateOutputType | null
    _avg: PlaylistsAvgAggregateOutputType | null
    _sum: PlaylistsSumAggregateOutputType | null
    _min: PlaylistsMinAggregateOutputType | null
    _max: PlaylistsMaxAggregateOutputType | null
  }

  export type PlaylistsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    duration: number | null
  }

  export type PlaylistsSumAggregateOutputType = {
    id: number | null
    userId: number | null
    duration: number | null
  }

  export type PlaylistsMinAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    duration: number | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlaylistsMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    duration: number | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlaylistsCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    duration: number
    image: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PlaylistsAvgAggregateInputType = {
    id?: true
    userId?: true
    duration?: true
  }

  export type PlaylistsSumAggregateInputType = {
    id?: true
    userId?: true
    duration?: true
  }

  export type PlaylistsMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    duration?: true
    image?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlaylistsMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    duration?: true
    image?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlaylistsCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    duration?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PlaylistsAggregateArgs = {
    /**
     * Filter which playlists to aggregate.
     * 
    **/
    where?: playlistsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of playlists to fetch.
     * 
    **/
    orderBy?: Enumerable<playlistsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: playlistsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` playlists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` playlists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned playlists
    **/
    _count?: true | PlaylistsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlaylistsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlaylistsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlaylistsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlaylistsMaxAggregateInputType
  }

  export type GetPlaylistsAggregateType<T extends PlaylistsAggregateArgs> = {
        [P in keyof T & keyof AggregatePlaylists]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlaylists[P]>
      : GetScalarType<T[P], AggregatePlaylists[P]>
  }




  export type PlaylistsGroupByArgs = {
    where?: playlistsWhereInput
    orderBy?: Enumerable<playlistsOrderByWithAggregationInput>
    by: Array<PlaylistsScalarFieldEnum>
    having?: playlistsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlaylistsCountAggregateInputType | true
    _avg?: PlaylistsAvgAggregateInputType
    _sum?: PlaylistsSumAggregateInputType
    _min?: PlaylistsMinAggregateInputType
    _max?: PlaylistsMaxAggregateInputType
  }


  export type PlaylistsGroupByOutputType = {
    id: number
    userId: number
    name: string
    duration: number
    image: string
    createdAt: Date
    updatedAt: Date
    _count: PlaylistsCountAggregateOutputType | null
    _avg: PlaylistsAvgAggregateOutputType | null
    _sum: PlaylistsSumAggregateOutputType | null
    _min: PlaylistsMinAggregateOutputType | null
    _max: PlaylistsMaxAggregateOutputType | null
  }

  type GetPlaylistsGroupByPayload<T extends PlaylistsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PlaylistsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlaylistsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlaylistsGroupByOutputType[P]>
            : GetScalarType<T[P], PlaylistsGroupByOutputType[P]>
        }
      >
    >


  export type playlistsSelect = {
    id?: boolean
    userId?: boolean
    name?: boolean
    duration?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | usersArgs
    musicsPlaylists?: boolean | musicsPlaylistsFindManyArgs
    _count?: boolean | PlaylistsCountOutputTypeArgs
  }

  export type playlistsInclude = {
    users?: boolean | usersArgs
    musicsPlaylists?: boolean | musicsPlaylistsFindManyArgs
    _count?: boolean | PlaylistsCountOutputTypeArgs
  }

  export type playlistsGetPayload<
    S extends boolean | null | undefined | playlistsArgs,
    U = keyof S
      > = S extends true
        ? playlists
    : S extends undefined
    ? never
    : S extends playlistsArgs | playlistsFindManyArgs
    ?'include' extends U
    ? playlists  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? usersGetPayload<S['include'][P]> :
        P extends 'musicsPlaylists' ? Array < musicsPlaylistsGetPayload<S['include'][P]>>  :
        P extends '_count' ? PlaylistsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? usersGetPayload<S['select'][P]> :
        P extends 'musicsPlaylists' ? Array < musicsPlaylistsGetPayload<S['select'][P]>>  :
        P extends '_count' ? PlaylistsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof playlists ? playlists[P] : never
  } 
    : playlists
  : playlists


  type playlistsCountArgs = Merge<
    Omit<playlistsFindManyArgs, 'select' | 'include'> & {
      select?: PlaylistsCountAggregateInputType | true
    }
  >

  export interface playlistsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Playlists that matches the filter.
     * @param {playlistsFindUniqueArgs} args - Arguments to find a Playlists
     * @example
     * // Get one Playlists
     * const playlists = await prisma.playlists.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends playlistsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, playlistsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'playlists'> extends True ? CheckSelect<T, Prisma__playlistsClient<playlists>, Prisma__playlistsClient<playlistsGetPayload<T>>> : CheckSelect<T, Prisma__playlistsClient<playlists | null >, Prisma__playlistsClient<playlistsGetPayload<T> | null >>

    /**
     * Find the first Playlists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {playlistsFindFirstArgs} args - Arguments to find a Playlists
     * @example
     * // Get one Playlists
     * const playlists = await prisma.playlists.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends playlistsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, playlistsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'playlists'> extends True ? CheckSelect<T, Prisma__playlistsClient<playlists>, Prisma__playlistsClient<playlistsGetPayload<T>>> : CheckSelect<T, Prisma__playlistsClient<playlists | null >, Prisma__playlistsClient<playlistsGetPayload<T> | null >>

    /**
     * Find zero or more Playlists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {playlistsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Playlists
     * const playlists = await prisma.playlists.findMany()
     * 
     * // Get first 10 Playlists
     * const playlists = await prisma.playlists.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playlistsWithIdOnly = await prisma.playlists.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends playlistsFindManyArgs>(
      args?: SelectSubset<T, playlistsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<playlists>>, PrismaPromise<Array<playlistsGetPayload<T>>>>

    /**
     * Create a Playlists.
     * @param {playlistsCreateArgs} args - Arguments to create a Playlists.
     * @example
     * // Create one Playlists
     * const Playlists = await prisma.playlists.create({
     *   data: {
     *     // ... data to create a Playlists
     *   }
     * })
     * 
    **/
    create<T extends playlistsCreateArgs>(
      args: SelectSubset<T, playlistsCreateArgs>
    ): CheckSelect<T, Prisma__playlistsClient<playlists>, Prisma__playlistsClient<playlistsGetPayload<T>>>

    /**
     * Create many Playlists.
     *     @param {playlistsCreateManyArgs} args - Arguments to create many Playlists.
     *     @example
     *     // Create many Playlists
     *     const playlists = await prisma.playlists.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends playlistsCreateManyArgs>(
      args?: SelectSubset<T, playlistsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Playlists.
     * @param {playlistsDeleteArgs} args - Arguments to delete one Playlists.
     * @example
     * // Delete one Playlists
     * const Playlists = await prisma.playlists.delete({
     *   where: {
     *     // ... filter to delete one Playlists
     *   }
     * })
     * 
    **/
    delete<T extends playlistsDeleteArgs>(
      args: SelectSubset<T, playlistsDeleteArgs>
    ): CheckSelect<T, Prisma__playlistsClient<playlists>, Prisma__playlistsClient<playlistsGetPayload<T>>>

    /**
     * Update one Playlists.
     * @param {playlistsUpdateArgs} args - Arguments to update one Playlists.
     * @example
     * // Update one Playlists
     * const playlists = await prisma.playlists.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends playlistsUpdateArgs>(
      args: SelectSubset<T, playlistsUpdateArgs>
    ): CheckSelect<T, Prisma__playlistsClient<playlists>, Prisma__playlistsClient<playlistsGetPayload<T>>>

    /**
     * Delete zero or more Playlists.
     * @param {playlistsDeleteManyArgs} args - Arguments to filter Playlists to delete.
     * @example
     * // Delete a few Playlists
     * const { count } = await prisma.playlists.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends playlistsDeleteManyArgs>(
      args?: SelectSubset<T, playlistsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Playlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {playlistsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Playlists
     * const playlists = await prisma.playlists.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends playlistsUpdateManyArgs>(
      args: SelectSubset<T, playlistsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Playlists.
     * @param {playlistsUpsertArgs} args - Arguments to update or create a Playlists.
     * @example
     * // Update or create a Playlists
     * const playlists = await prisma.playlists.upsert({
     *   create: {
     *     // ... data to create a Playlists
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Playlists we want to update
     *   }
     * })
    **/
    upsert<T extends playlistsUpsertArgs>(
      args: SelectSubset<T, playlistsUpsertArgs>
    ): CheckSelect<T, Prisma__playlistsClient<playlists>, Prisma__playlistsClient<playlistsGetPayload<T>>>

    /**
     * Count the number of Playlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {playlistsCountArgs} args - Arguments to filter Playlists to count.
     * @example
     * // Count the number of Playlists
     * const count = await prisma.playlists.count({
     *   where: {
     *     // ... the filter for the Playlists we want to count
     *   }
     * })
    **/
    count<T extends playlistsCountArgs>(
      args?: Subset<T, playlistsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlaylistsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Playlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlaylistsAggregateArgs>(args: Subset<T, PlaylistsAggregateArgs>): PrismaPromise<GetPlaylistsAggregateType<T>>

    /**
     * Group by Playlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlaylistsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlaylistsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlaylistsGroupByArgs['orderBy'] }
        : { orderBy?: PlaylistsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlaylistsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlaylistsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for playlists.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__playlistsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    musicsPlaylists<T extends musicsPlaylistsFindManyArgs = {}>(args?: Subset<T, musicsPlaylistsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<musicsPlaylists>>, PrismaPromise<Array<musicsPlaylistsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * playlists findUnique
   */
  export type playlistsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the playlists
     * 
    **/
    select?: playlistsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: playlistsInclude | null
    /**
     * Throw an Error if a playlists can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which playlists to fetch.
     * 
    **/
    where: playlistsWhereUniqueInput
  }


  /**
   * playlists findFirst
   */
  export type playlistsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the playlists
     * 
    **/
    select?: playlistsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: playlistsInclude | null
    /**
     * Throw an Error if a playlists can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which playlists to fetch.
     * 
    **/
    where?: playlistsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of playlists to fetch.
     * 
    **/
    orderBy?: Enumerable<playlistsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for playlists.
     * 
    **/
    cursor?: playlistsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` playlists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` playlists.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of playlists.
     * 
    **/
    distinct?: Enumerable<PlaylistsScalarFieldEnum>
  }


  /**
   * playlists findMany
   */
  export type playlistsFindManyArgs = {
    /**
     * Select specific fields to fetch from the playlists
     * 
    **/
    select?: playlistsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: playlistsInclude | null
    /**
     * Filter, which playlists to fetch.
     * 
    **/
    where?: playlistsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of playlists to fetch.
     * 
    **/
    orderBy?: Enumerable<playlistsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing playlists.
     * 
    **/
    cursor?: playlistsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` playlists from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` playlists.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PlaylistsScalarFieldEnum>
  }


  /**
   * playlists create
   */
  export type playlistsCreateArgs = {
    /**
     * Select specific fields to fetch from the playlists
     * 
    **/
    select?: playlistsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: playlistsInclude | null
    /**
     * The data needed to create a playlists.
     * 
    **/
    data: XOR<playlistsCreateInput, playlistsUncheckedCreateInput>
  }


  /**
   * playlists createMany
   */
  export type playlistsCreateManyArgs = {
    /**
     * The data used to create many playlists.
     * 
    **/
    data: Enumerable<playlistsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * playlists update
   */
  export type playlistsUpdateArgs = {
    /**
     * Select specific fields to fetch from the playlists
     * 
    **/
    select?: playlistsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: playlistsInclude | null
    /**
     * The data needed to update a playlists.
     * 
    **/
    data: XOR<playlistsUpdateInput, playlistsUncheckedUpdateInput>
    /**
     * Choose, which playlists to update.
     * 
    **/
    where: playlistsWhereUniqueInput
  }


  /**
   * playlists updateMany
   */
  export type playlistsUpdateManyArgs = {
    /**
     * The data used to update playlists.
     * 
    **/
    data: XOR<playlistsUpdateManyMutationInput, playlistsUncheckedUpdateManyInput>
    /**
     * Filter which playlists to update
     * 
    **/
    where?: playlistsWhereInput
  }


  /**
   * playlists upsert
   */
  export type playlistsUpsertArgs = {
    /**
     * Select specific fields to fetch from the playlists
     * 
    **/
    select?: playlistsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: playlistsInclude | null
    /**
     * The filter to search for the playlists to update in case it exists.
     * 
    **/
    where: playlistsWhereUniqueInput
    /**
     * In case the playlists found by the `where` argument doesn't exist, create a new playlists with this data.
     * 
    **/
    create: XOR<playlistsCreateInput, playlistsUncheckedCreateInput>
    /**
     * In case the playlists was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<playlistsUpdateInput, playlistsUncheckedUpdateInput>
  }


  /**
   * playlists delete
   */
  export type playlistsDeleteArgs = {
    /**
     * Select specific fields to fetch from the playlists
     * 
    **/
    select?: playlistsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: playlistsInclude | null
    /**
     * Filter which playlists to delete.
     * 
    **/
    where: playlistsWhereUniqueInput
  }


  /**
   * playlists deleteMany
   */
  export type playlistsDeleteManyArgs = {
    /**
     * Filter which playlists to delete
     * 
    **/
    where?: playlistsWhereInput
  }


  /**
   * playlists without action
   */
  export type playlistsArgs = {
    /**
     * Select specific fields to fetch from the playlists
     * 
    **/
    select?: playlistsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: playlistsInclude | null
  }



  /**
   * Model sessions
   */


  export type AggregateSessions = {
    _count: SessionsCountAggregateOutputType | null
    _avg: SessionsAvgAggregateOutputType | null
    _sum: SessionsSumAggregateOutputType | null
    _min: SessionsMinAggregateOutputType | null
    _max: SessionsMaxAggregateOutputType | null
  }

  export type SessionsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SessionsSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SessionsMinAggregateOutputType = {
    id: number | null
    userId: number | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionsMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionsCountAggregateOutputType = {
    id: number
    userId: number
    token: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SessionsAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SessionsSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SessionsMinAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionsMaxAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionsCountAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SessionsAggregateArgs = {
    /**
     * Filter which sessions to aggregate.
     * 
    **/
    where?: sessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<sessionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: sessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sessions
    **/
    _count?: true | SessionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionsMaxAggregateInputType
  }

  export type GetSessionsAggregateType<T extends SessionsAggregateArgs> = {
        [P in keyof T & keyof AggregateSessions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSessions[P]>
      : GetScalarType<T[P], AggregateSessions[P]>
  }




  export type SessionsGroupByArgs = {
    where?: sessionsWhereInput
    orderBy?: Enumerable<sessionsOrderByWithAggregationInput>
    by: Array<SessionsScalarFieldEnum>
    having?: sessionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionsCountAggregateInputType | true
    _avg?: SessionsAvgAggregateInputType
    _sum?: SessionsSumAggregateInputType
    _min?: SessionsMinAggregateInputType
    _max?: SessionsMaxAggregateInputType
  }


  export type SessionsGroupByOutputType = {
    id: number
    userId: number
    token: string
    createdAt: Date
    updatedAt: Date
    _count: SessionsCountAggregateOutputType | null
    _avg: SessionsAvgAggregateOutputType | null
    _sum: SessionsSumAggregateOutputType | null
    _min: SessionsMinAggregateOutputType | null
    _max: SessionsMaxAggregateOutputType | null
  }

  type GetSessionsGroupByPayload<T extends SessionsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SessionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionsGroupByOutputType[P]>
            : GetScalarType<T[P], SessionsGroupByOutputType[P]>
        }
      >
    >


  export type sessionsSelect = {
    id?: boolean
    userId?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | usersArgs
  }

  export type sessionsInclude = {
    users?: boolean | usersArgs
  }

  export type sessionsGetPayload<
    S extends boolean | null | undefined | sessionsArgs,
    U = keyof S
      > = S extends true
        ? sessions
    : S extends undefined
    ? never
    : S extends sessionsArgs | sessionsFindManyArgs
    ?'include' extends U
    ? sessions  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? usersGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? usersGetPayload<S['select'][P]> :  P extends keyof sessions ? sessions[P] : never
  } 
    : sessions
  : sessions


  type sessionsCountArgs = Merge<
    Omit<sessionsFindManyArgs, 'select' | 'include'> & {
      select?: SessionsCountAggregateInputType | true
    }
  >

  export interface sessionsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Sessions that matches the filter.
     * @param {sessionsFindUniqueArgs} args - Arguments to find a Sessions
     * @example
     * // Get one Sessions
     * const sessions = await prisma.sessions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends sessionsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, sessionsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'sessions'> extends True ? CheckSelect<T, Prisma__sessionsClient<sessions>, Prisma__sessionsClient<sessionsGetPayload<T>>> : CheckSelect<T, Prisma__sessionsClient<sessions | null >, Prisma__sessionsClient<sessionsGetPayload<T> | null >>

    /**
     * Find the first Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionsFindFirstArgs} args - Arguments to find a Sessions
     * @example
     * // Get one Sessions
     * const sessions = await prisma.sessions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends sessionsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, sessionsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'sessions'> extends True ? CheckSelect<T, Prisma__sessionsClient<sessions>, Prisma__sessionsClient<sessionsGetPayload<T>>> : CheckSelect<T, Prisma__sessionsClient<sessions | null >, Prisma__sessionsClient<sessionsGetPayload<T> | null >>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.sessions.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.sessions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionsWithIdOnly = await prisma.sessions.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends sessionsFindManyArgs>(
      args?: SelectSubset<T, sessionsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<sessions>>, PrismaPromise<Array<sessionsGetPayload<T>>>>

    /**
     * Create a Sessions.
     * @param {sessionsCreateArgs} args - Arguments to create a Sessions.
     * @example
     * // Create one Sessions
     * const Sessions = await prisma.sessions.create({
     *   data: {
     *     // ... data to create a Sessions
     *   }
     * })
     * 
    **/
    create<T extends sessionsCreateArgs>(
      args: SelectSubset<T, sessionsCreateArgs>
    ): CheckSelect<T, Prisma__sessionsClient<sessions>, Prisma__sessionsClient<sessionsGetPayload<T>>>

    /**
     * Create many Sessions.
     *     @param {sessionsCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const sessions = await prisma.sessions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends sessionsCreateManyArgs>(
      args?: SelectSubset<T, sessionsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Sessions.
     * @param {sessionsDeleteArgs} args - Arguments to delete one Sessions.
     * @example
     * // Delete one Sessions
     * const Sessions = await prisma.sessions.delete({
     *   where: {
     *     // ... filter to delete one Sessions
     *   }
     * })
     * 
    **/
    delete<T extends sessionsDeleteArgs>(
      args: SelectSubset<T, sessionsDeleteArgs>
    ): CheckSelect<T, Prisma__sessionsClient<sessions>, Prisma__sessionsClient<sessionsGetPayload<T>>>

    /**
     * Update one Sessions.
     * @param {sessionsUpdateArgs} args - Arguments to update one Sessions.
     * @example
     * // Update one Sessions
     * const sessions = await prisma.sessions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends sessionsUpdateArgs>(
      args: SelectSubset<T, sessionsUpdateArgs>
    ): CheckSelect<T, Prisma__sessionsClient<sessions>, Prisma__sessionsClient<sessionsGetPayload<T>>>

    /**
     * Delete zero or more Sessions.
     * @param {sessionsDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.sessions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends sessionsDeleteManyArgs>(
      args?: SelectSubset<T, sessionsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const sessions = await prisma.sessions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends sessionsUpdateManyArgs>(
      args: SelectSubset<T, sessionsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Sessions.
     * @param {sessionsUpsertArgs} args - Arguments to update or create a Sessions.
     * @example
     * // Update or create a Sessions
     * const sessions = await prisma.sessions.upsert({
     *   create: {
     *     // ... data to create a Sessions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sessions we want to update
     *   }
     * })
    **/
    upsert<T extends sessionsUpsertArgs>(
      args: SelectSubset<T, sessionsUpsertArgs>
    ): CheckSelect<T, Prisma__sessionsClient<sessions>, Prisma__sessionsClient<sessionsGetPayload<T>>>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sessionsCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.sessions.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends sessionsCountArgs>(
      args?: Subset<T, sessionsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionsAggregateArgs>(args: Subset<T, SessionsAggregateArgs>): PrismaPromise<GetSessionsAggregateType<T>>

    /**
     * Group by Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionsGroupByArgs['orderBy'] }
        : { orderBy?: SessionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for sessions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__sessionsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * sessions findUnique
   */
  export type sessionsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the sessions
     * 
    **/
    select?: sessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sessionsInclude | null
    /**
     * Throw an Error if a sessions can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which sessions to fetch.
     * 
    **/
    where: sessionsWhereUniqueInput
  }


  /**
   * sessions findFirst
   */
  export type sessionsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the sessions
     * 
    **/
    select?: sessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sessionsInclude | null
    /**
     * Throw an Error if a sessions can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which sessions to fetch.
     * 
    **/
    where?: sessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<sessionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sessions.
     * 
    **/
    cursor?: sessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sessions.
     * 
    **/
    distinct?: Enumerable<SessionsScalarFieldEnum>
  }


  /**
   * sessions findMany
   */
  export type sessionsFindManyArgs = {
    /**
     * Select specific fields to fetch from the sessions
     * 
    **/
    select?: sessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sessionsInclude | null
    /**
     * Filter, which sessions to fetch.
     * 
    **/
    where?: sessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<sessionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sessions.
     * 
    **/
    cursor?: sessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sessions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SessionsScalarFieldEnum>
  }


  /**
   * sessions create
   */
  export type sessionsCreateArgs = {
    /**
     * Select specific fields to fetch from the sessions
     * 
    **/
    select?: sessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sessionsInclude | null
    /**
     * The data needed to create a sessions.
     * 
    **/
    data: XOR<sessionsCreateInput, sessionsUncheckedCreateInput>
  }


  /**
   * sessions createMany
   */
  export type sessionsCreateManyArgs = {
    /**
     * The data used to create many sessions.
     * 
    **/
    data: Enumerable<sessionsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * sessions update
   */
  export type sessionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the sessions
     * 
    **/
    select?: sessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sessionsInclude | null
    /**
     * The data needed to update a sessions.
     * 
    **/
    data: XOR<sessionsUpdateInput, sessionsUncheckedUpdateInput>
    /**
     * Choose, which sessions to update.
     * 
    **/
    where: sessionsWhereUniqueInput
  }


  /**
   * sessions updateMany
   */
  export type sessionsUpdateManyArgs = {
    /**
     * The data used to update sessions.
     * 
    **/
    data: XOR<sessionsUpdateManyMutationInput, sessionsUncheckedUpdateManyInput>
    /**
     * Filter which sessions to update
     * 
    **/
    where?: sessionsWhereInput
  }


  /**
   * sessions upsert
   */
  export type sessionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the sessions
     * 
    **/
    select?: sessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sessionsInclude | null
    /**
     * The filter to search for the sessions to update in case it exists.
     * 
    **/
    where: sessionsWhereUniqueInput
    /**
     * In case the sessions found by the `where` argument doesn't exist, create a new sessions with this data.
     * 
    **/
    create: XOR<sessionsCreateInput, sessionsUncheckedCreateInput>
    /**
     * In case the sessions was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<sessionsUpdateInput, sessionsUncheckedUpdateInput>
  }


  /**
   * sessions delete
   */
  export type sessionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the sessions
     * 
    **/
    select?: sessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sessionsInclude | null
    /**
     * Filter which sessions to delete.
     * 
    **/
    where: sessionsWhereUniqueInput
  }


  /**
   * sessions deleteMany
   */
  export type sessionsDeleteManyArgs = {
    /**
     * Filter which sessions to delete
     * 
    **/
    where?: sessionsWhereInput
  }


  /**
   * sessions without action
   */
  export type sessionsArgs = {
    /**
     * Select specific fields to fetch from the sessions
     * 
    **/
    select?: sessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: sessionsInclude | null
  }



  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    email: string | null
    passwordHash: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    email: string | null
    passwordHash: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    email: number
    passwordHash: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which users to aggregate.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByWithAggregationInput>
    by: Array<UsersScalarFieldEnum>
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: number
    email: string
    passwordHash: string
    createdAt: Date
    updatedAt: Date
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect = {
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    playlists?: boolean | playlistsFindManyArgs
    sessions?: boolean | sessionsFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type usersInclude = {
    playlists?: boolean | playlistsFindManyArgs
    sessions?: boolean | sessionsFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type usersGetPayload<
    S extends boolean | null | undefined | usersArgs,
    U = keyof S
      > = S extends true
        ? users
    : S extends undefined
    ? never
    : S extends usersArgs | usersFindManyArgs
    ?'include' extends U
    ? users  & {
    [P in TrueKeys<S['include']>]:
        P extends 'playlists' ? Array < playlistsGetPayload<S['include'][P]>>  :
        P extends 'sessions' ? Array < sessionsGetPayload<S['include'][P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'playlists' ? Array < playlistsGetPayload<S['select'][P]>>  :
        P extends 'sessions' ? Array < sessionsGetPayload<S['select'][P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof users ? users[P] : never
  } 
    : users
  : users


  type usersCountArgs = Merge<
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface usersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs>(
      args?: SelectSubset<T, usersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<users>>, PrismaPromise<Array<usersGetPayload<T>>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: SelectSubset<T, usersCreateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs>(
      args?: SelectSubset<T, usersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: SelectSubset<T, usersDeleteArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: SelectSubset<T, usersUpdateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: SelectSubset<T, usersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: SelectSubset<T, usersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: SelectSubset<T, usersUpsertArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    playlists<T extends playlistsFindManyArgs = {}>(args?: Subset<T, playlistsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<playlists>>, PrismaPromise<Array<playlistsGetPayload<T>>>>;

    sessions<T extends sessionsFindManyArgs = {}>(args?: Subset<T, sessionsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<sessions>>, PrismaPromise<Array<sessionsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type usersFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Throw an Error if a users can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type usersFindFirstArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Throw an Error if a users can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to create a users.
     * 
    **/
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs = {
    /**
     * The data used to create many users.
     * 
    **/
    data: Enumerable<usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to update a users.
     * 
    **/
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    /**
     * The data used to update users.
     * 
    **/
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     * 
    **/
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The filter to search for the users to update in case it exists.
     * 
    **/
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     * 
    **/
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter which users to delete.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    /**
     * Filter which users to delete
     * 
    **/
    where?: usersWhereInput
  }


  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const MusicsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    duration: 'duration',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MusicsScalarFieldEnum = (typeof MusicsScalarFieldEnum)[keyof typeof MusicsScalarFieldEnum]


  export const MusicsPlaylistsScalarFieldEnum: {
    id: 'id',
    playlistId: 'playlistId',
    musicsId: 'musicsId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MusicsPlaylistsScalarFieldEnum = (typeof MusicsPlaylistsScalarFieldEnum)[keyof typeof MusicsPlaylistsScalarFieldEnum]


  export const PlaylistsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    duration: 'duration',
    image: 'image',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PlaylistsScalarFieldEnum = (typeof PlaylistsScalarFieldEnum)[keyof typeof PlaylistsScalarFieldEnum]


  export const SessionsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SessionsScalarFieldEnum = (typeof SessionsScalarFieldEnum)[keyof typeof SessionsScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type musicsWhereInput = {
    AND?: Enumerable<musicsWhereInput>
    OR?: Enumerable<musicsWhereInput>
    NOT?: Enumerable<musicsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    duration?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    musicsPlaylists?: MusicsPlaylistsListRelationFilter
  }

  export type musicsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    musicsPlaylists?: musicsPlaylistsOrderByRelationAggregateInput
  }

  export type musicsWhereUniqueInput = {
    id?: number
  }

  export type musicsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: musicsCountOrderByAggregateInput
    _avg?: musicsAvgOrderByAggregateInput
    _max?: musicsMaxOrderByAggregateInput
    _min?: musicsMinOrderByAggregateInput
    _sum?: musicsSumOrderByAggregateInput
  }

  export type musicsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<musicsScalarWhereWithAggregatesInput>
    OR?: Enumerable<musicsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<musicsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    duration?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type musicsPlaylistsWhereInput = {
    AND?: Enumerable<musicsPlaylistsWhereInput>
    OR?: Enumerable<musicsPlaylistsWhereInput>
    NOT?: Enumerable<musicsPlaylistsWhereInput>
    id?: IntFilter | number
    playlistId?: IntFilter | number
    musicsId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    musics?: XOR<MusicsRelationFilter, musicsWhereInput>
    playlists?: XOR<PlaylistsRelationFilter, playlistsWhereInput>
  }

  export type musicsPlaylistsOrderByWithRelationInput = {
    id?: SortOrder
    playlistId?: SortOrder
    musicsId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    musics?: musicsOrderByWithRelationInput
    playlists?: playlistsOrderByWithRelationInput
  }

  export type musicsPlaylistsWhereUniqueInput = {
    id?: number
  }

  export type musicsPlaylistsOrderByWithAggregationInput = {
    id?: SortOrder
    playlistId?: SortOrder
    musicsId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: musicsPlaylistsCountOrderByAggregateInput
    _avg?: musicsPlaylistsAvgOrderByAggregateInput
    _max?: musicsPlaylistsMaxOrderByAggregateInput
    _min?: musicsPlaylistsMinOrderByAggregateInput
    _sum?: musicsPlaylistsSumOrderByAggregateInput
  }

  export type musicsPlaylistsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<musicsPlaylistsScalarWhereWithAggregatesInput>
    OR?: Enumerable<musicsPlaylistsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<musicsPlaylistsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    playlistId?: IntWithAggregatesFilter | number
    musicsId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type playlistsWhereInput = {
    AND?: Enumerable<playlistsWhereInput>
    OR?: Enumerable<playlistsWhereInput>
    NOT?: Enumerable<playlistsWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    name?: StringFilter | string
    duration?: IntFilter | number
    image?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    users?: XOR<UsersRelationFilter, usersWhereInput>
    musicsPlaylists?: MusicsPlaylistsListRelationFilter
  }

  export type playlistsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    duration?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: usersOrderByWithRelationInput
    musicsPlaylists?: musicsPlaylistsOrderByRelationAggregateInput
  }

  export type playlistsWhereUniqueInput = {
    id?: number
  }

  export type playlistsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    duration?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: playlistsCountOrderByAggregateInput
    _avg?: playlistsAvgOrderByAggregateInput
    _max?: playlistsMaxOrderByAggregateInput
    _min?: playlistsMinOrderByAggregateInput
    _sum?: playlistsSumOrderByAggregateInput
  }

  export type playlistsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<playlistsScalarWhereWithAggregatesInput>
    OR?: Enumerable<playlistsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<playlistsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    duration?: IntWithAggregatesFilter | number
    image?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type sessionsWhereInput = {
    AND?: Enumerable<sessionsWhereInput>
    OR?: Enumerable<sessionsWhereInput>
    NOT?: Enumerable<sessionsWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    token?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type sessionsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: usersOrderByWithRelationInput
  }

  export type sessionsWhereUniqueInput = {
    id?: number
  }

  export type sessionsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: sessionsCountOrderByAggregateInput
    _avg?: sessionsAvgOrderByAggregateInput
    _max?: sessionsMaxOrderByAggregateInput
    _min?: sessionsMinOrderByAggregateInput
    _sum?: sessionsSumOrderByAggregateInput
  }

  export type sessionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<sessionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<sessionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<sessionsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    token?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    passwordHash?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    playlists?: PlaylistsListRelationFilter
    sessions?: SessionsListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    playlists?: playlistsOrderByRelationAggregateInput
    sessions?: sessionsOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    passwordHash?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type musicsCreateInput = {
    name: string
    duration: number
    createdAt?: Date | string
    updatedAt?: Date | string
    musicsPlaylists?: musicsPlaylistsCreateNestedManyWithoutMusicsInput
  }

  export type musicsUncheckedCreateInput = {
    id?: number
    name: string
    duration: number
    createdAt?: Date | string
    updatedAt?: Date | string
    musicsPlaylists?: musicsPlaylistsUncheckedCreateNestedManyWithoutMusicsInput
  }

  export type musicsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    musicsPlaylists?: musicsPlaylistsUpdateManyWithoutMusicsInput
  }

  export type musicsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    musicsPlaylists?: musicsPlaylistsUncheckedUpdateManyWithoutMusicsInput
  }

  export type musicsCreateManyInput = {
    id?: number
    name: string
    duration: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type musicsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type musicsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type musicsPlaylistsCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    musics: musicsCreateNestedOneWithoutMusicsPlaylistsInput
    playlists: playlistsCreateNestedOneWithoutMusicsPlaylistsInput
  }

  export type musicsPlaylistsUncheckedCreateInput = {
    id?: number
    playlistId: number
    musicsId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type musicsPlaylistsUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    musics?: musicsUpdateOneRequiredWithoutMusicsPlaylistsInput
    playlists?: playlistsUpdateOneRequiredWithoutMusicsPlaylistsInput
  }

  export type musicsPlaylistsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    playlistId?: IntFieldUpdateOperationsInput | number
    musicsId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type musicsPlaylistsCreateManyInput = {
    id?: number
    playlistId: number
    musicsId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type musicsPlaylistsUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type musicsPlaylistsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    playlistId?: IntFieldUpdateOperationsInput | number
    musicsId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type playlistsCreateInput = {
    name: string
    duration: number
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users: usersCreateNestedOneWithoutPlaylistsInput
    musicsPlaylists?: musicsPlaylistsCreateNestedManyWithoutPlaylistsInput
  }

  export type playlistsUncheckedCreateInput = {
    id?: number
    userId: number
    name: string
    duration: number
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    musicsPlaylists?: musicsPlaylistsUncheckedCreateNestedManyWithoutPlaylistsInput
  }

  export type playlistsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: usersUpdateOneRequiredWithoutPlaylistsInput
    musicsPlaylists?: musicsPlaylistsUpdateManyWithoutPlaylistsInput
  }

  export type playlistsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    musicsPlaylists?: musicsPlaylistsUncheckedUpdateManyWithoutPlaylistsInput
  }

  export type playlistsCreateManyInput = {
    id?: number
    userId: number
    name: string
    duration: number
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type playlistsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type playlistsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sessionsCreateInput = {
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users: usersCreateNestedOneWithoutSessionsInput
  }

  export type sessionsUncheckedCreateInput = {
    id?: number
    userId: number
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type sessionsUpdateInput = {
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: usersUpdateOneRequiredWithoutSessionsInput
  }

  export type sessionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sessionsCreateManyInput = {
    id?: number
    userId: number
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type sessionsUpdateManyMutationInput = {
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sessionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersCreateInput = {
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    playlists?: playlistsCreateNestedManyWithoutUsersInput
    sessions?: sessionsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    playlists?: playlistsUncheckedCreateNestedManyWithoutUsersInput
    sessions?: sessionsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playlists?: playlistsUpdateManyWithoutUsersInput
    sessions?: sessionsUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playlists?: playlistsUncheckedUpdateManyWithoutUsersInput
    sessions?: sessionsUncheckedUpdateManyWithoutUsersInput
  }

  export type usersCreateManyInput = {
    id?: number
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type usersUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type MusicsPlaylistsListRelationFilter = {
    every?: musicsPlaylistsWhereInput
    some?: musicsPlaylistsWhereInput
    none?: musicsPlaylistsWhereInput
  }

  export type musicsPlaylistsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type musicsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type musicsAvgOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
  }

  export type musicsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type musicsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type musicsSumOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type MusicsRelationFilter = {
    is?: musicsWhereInput
    isNot?: musicsWhereInput
  }

  export type PlaylistsRelationFilter = {
    is?: playlistsWhereInput
    isNot?: playlistsWhereInput
  }

  export type musicsPlaylistsCountOrderByAggregateInput = {
    id?: SortOrder
    playlistId?: SortOrder
    musicsId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type musicsPlaylistsAvgOrderByAggregateInput = {
    id?: SortOrder
    playlistId?: SortOrder
    musicsId?: SortOrder
  }

  export type musicsPlaylistsMaxOrderByAggregateInput = {
    id?: SortOrder
    playlistId?: SortOrder
    musicsId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type musicsPlaylistsMinOrderByAggregateInput = {
    id?: SortOrder
    playlistId?: SortOrder
    musicsId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type musicsPlaylistsSumOrderByAggregateInput = {
    id?: SortOrder
    playlistId?: SortOrder
    musicsId?: SortOrder
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type playlistsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    duration?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type playlistsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    duration?: SortOrder
  }

  export type playlistsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    duration?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type playlistsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    duration?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type playlistsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    duration?: SortOrder
  }

  export type sessionsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type sessionsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type sessionsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type sessionsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type sessionsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type PlaylistsListRelationFilter = {
    every?: playlistsWhereInput
    some?: playlistsWhereInput
    none?: playlistsWhereInput
  }

  export type SessionsListRelationFilter = {
    every?: sessionsWhereInput
    some?: sessionsWhereInput
    none?: sessionsWhereInput
  }

  export type playlistsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type sessionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type musicsPlaylistsCreateNestedManyWithoutMusicsInput = {
    create?: XOR<Enumerable<musicsPlaylistsCreateWithoutMusicsInput>, Enumerable<musicsPlaylistsUncheckedCreateWithoutMusicsInput>>
    connectOrCreate?: Enumerable<musicsPlaylistsCreateOrConnectWithoutMusicsInput>
    createMany?: musicsPlaylistsCreateManyMusicsInputEnvelope
    connect?: Enumerable<musicsPlaylistsWhereUniqueInput>
  }

  export type musicsPlaylistsUncheckedCreateNestedManyWithoutMusicsInput = {
    create?: XOR<Enumerable<musicsPlaylistsCreateWithoutMusicsInput>, Enumerable<musicsPlaylistsUncheckedCreateWithoutMusicsInput>>
    connectOrCreate?: Enumerable<musicsPlaylistsCreateOrConnectWithoutMusicsInput>
    createMany?: musicsPlaylistsCreateManyMusicsInputEnvelope
    connect?: Enumerable<musicsPlaylistsWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type musicsPlaylistsUpdateManyWithoutMusicsInput = {
    create?: XOR<Enumerable<musicsPlaylistsCreateWithoutMusicsInput>, Enumerable<musicsPlaylistsUncheckedCreateWithoutMusicsInput>>
    connectOrCreate?: Enumerable<musicsPlaylistsCreateOrConnectWithoutMusicsInput>
    upsert?: Enumerable<musicsPlaylistsUpsertWithWhereUniqueWithoutMusicsInput>
    createMany?: musicsPlaylistsCreateManyMusicsInputEnvelope
    set?: Enumerable<musicsPlaylistsWhereUniqueInput>
    disconnect?: Enumerable<musicsPlaylistsWhereUniqueInput>
    delete?: Enumerable<musicsPlaylistsWhereUniqueInput>
    connect?: Enumerable<musicsPlaylistsWhereUniqueInput>
    update?: Enumerable<musicsPlaylistsUpdateWithWhereUniqueWithoutMusicsInput>
    updateMany?: Enumerable<musicsPlaylistsUpdateManyWithWhereWithoutMusicsInput>
    deleteMany?: Enumerable<musicsPlaylistsScalarWhereInput>
  }

  export type musicsPlaylistsUncheckedUpdateManyWithoutMusicsInput = {
    create?: XOR<Enumerable<musicsPlaylistsCreateWithoutMusicsInput>, Enumerable<musicsPlaylistsUncheckedCreateWithoutMusicsInput>>
    connectOrCreate?: Enumerable<musicsPlaylistsCreateOrConnectWithoutMusicsInput>
    upsert?: Enumerable<musicsPlaylistsUpsertWithWhereUniqueWithoutMusicsInput>
    createMany?: musicsPlaylistsCreateManyMusicsInputEnvelope
    set?: Enumerable<musicsPlaylistsWhereUniqueInput>
    disconnect?: Enumerable<musicsPlaylistsWhereUniqueInput>
    delete?: Enumerable<musicsPlaylistsWhereUniqueInput>
    connect?: Enumerable<musicsPlaylistsWhereUniqueInput>
    update?: Enumerable<musicsPlaylistsUpdateWithWhereUniqueWithoutMusicsInput>
    updateMany?: Enumerable<musicsPlaylistsUpdateManyWithWhereWithoutMusicsInput>
    deleteMany?: Enumerable<musicsPlaylistsScalarWhereInput>
  }

  export type musicsCreateNestedOneWithoutMusicsPlaylistsInput = {
    create?: XOR<musicsCreateWithoutMusicsPlaylistsInput, musicsUncheckedCreateWithoutMusicsPlaylistsInput>
    connectOrCreate?: musicsCreateOrConnectWithoutMusicsPlaylistsInput
    connect?: musicsWhereUniqueInput
  }

  export type playlistsCreateNestedOneWithoutMusicsPlaylistsInput = {
    create?: XOR<playlistsCreateWithoutMusicsPlaylistsInput, playlistsUncheckedCreateWithoutMusicsPlaylistsInput>
    connectOrCreate?: playlistsCreateOrConnectWithoutMusicsPlaylistsInput
    connect?: playlistsWhereUniqueInput
  }

  export type musicsUpdateOneRequiredWithoutMusicsPlaylistsInput = {
    create?: XOR<musicsCreateWithoutMusicsPlaylistsInput, musicsUncheckedCreateWithoutMusicsPlaylistsInput>
    connectOrCreate?: musicsCreateOrConnectWithoutMusicsPlaylistsInput
    upsert?: musicsUpsertWithoutMusicsPlaylistsInput
    connect?: musicsWhereUniqueInput
    update?: XOR<musicsUpdateWithoutMusicsPlaylistsInput, musicsUncheckedUpdateWithoutMusicsPlaylistsInput>
  }

  export type playlistsUpdateOneRequiredWithoutMusicsPlaylistsInput = {
    create?: XOR<playlistsCreateWithoutMusicsPlaylistsInput, playlistsUncheckedCreateWithoutMusicsPlaylistsInput>
    connectOrCreate?: playlistsCreateOrConnectWithoutMusicsPlaylistsInput
    upsert?: playlistsUpsertWithoutMusicsPlaylistsInput
    connect?: playlistsWhereUniqueInput
    update?: XOR<playlistsUpdateWithoutMusicsPlaylistsInput, playlistsUncheckedUpdateWithoutMusicsPlaylistsInput>
  }

  export type usersCreateNestedOneWithoutPlaylistsInput = {
    create?: XOR<usersCreateWithoutPlaylistsInput, usersUncheckedCreateWithoutPlaylistsInput>
    connectOrCreate?: usersCreateOrConnectWithoutPlaylistsInput
    connect?: usersWhereUniqueInput
  }

  export type musicsPlaylistsCreateNestedManyWithoutPlaylistsInput = {
    create?: XOR<Enumerable<musicsPlaylistsCreateWithoutPlaylistsInput>, Enumerable<musicsPlaylistsUncheckedCreateWithoutPlaylistsInput>>
    connectOrCreate?: Enumerable<musicsPlaylistsCreateOrConnectWithoutPlaylistsInput>
    createMany?: musicsPlaylistsCreateManyPlaylistsInputEnvelope
    connect?: Enumerable<musicsPlaylistsWhereUniqueInput>
  }

  export type musicsPlaylistsUncheckedCreateNestedManyWithoutPlaylistsInput = {
    create?: XOR<Enumerable<musicsPlaylistsCreateWithoutPlaylistsInput>, Enumerable<musicsPlaylistsUncheckedCreateWithoutPlaylistsInput>>
    connectOrCreate?: Enumerable<musicsPlaylistsCreateOrConnectWithoutPlaylistsInput>
    createMany?: musicsPlaylistsCreateManyPlaylistsInputEnvelope
    connect?: Enumerable<musicsPlaylistsWhereUniqueInput>
  }

  export type usersUpdateOneRequiredWithoutPlaylistsInput = {
    create?: XOR<usersCreateWithoutPlaylistsInput, usersUncheckedCreateWithoutPlaylistsInput>
    connectOrCreate?: usersCreateOrConnectWithoutPlaylistsInput
    upsert?: usersUpsertWithoutPlaylistsInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutPlaylistsInput, usersUncheckedUpdateWithoutPlaylistsInput>
  }

  export type musicsPlaylistsUpdateManyWithoutPlaylistsInput = {
    create?: XOR<Enumerable<musicsPlaylistsCreateWithoutPlaylistsInput>, Enumerable<musicsPlaylistsUncheckedCreateWithoutPlaylistsInput>>
    connectOrCreate?: Enumerable<musicsPlaylistsCreateOrConnectWithoutPlaylistsInput>
    upsert?: Enumerable<musicsPlaylistsUpsertWithWhereUniqueWithoutPlaylistsInput>
    createMany?: musicsPlaylistsCreateManyPlaylistsInputEnvelope
    set?: Enumerable<musicsPlaylistsWhereUniqueInput>
    disconnect?: Enumerable<musicsPlaylistsWhereUniqueInput>
    delete?: Enumerable<musicsPlaylistsWhereUniqueInput>
    connect?: Enumerable<musicsPlaylistsWhereUniqueInput>
    update?: Enumerable<musicsPlaylistsUpdateWithWhereUniqueWithoutPlaylistsInput>
    updateMany?: Enumerable<musicsPlaylistsUpdateManyWithWhereWithoutPlaylistsInput>
    deleteMany?: Enumerable<musicsPlaylistsScalarWhereInput>
  }

  export type musicsPlaylistsUncheckedUpdateManyWithoutPlaylistsInput = {
    create?: XOR<Enumerable<musicsPlaylistsCreateWithoutPlaylistsInput>, Enumerable<musicsPlaylistsUncheckedCreateWithoutPlaylistsInput>>
    connectOrCreate?: Enumerable<musicsPlaylistsCreateOrConnectWithoutPlaylistsInput>
    upsert?: Enumerable<musicsPlaylistsUpsertWithWhereUniqueWithoutPlaylistsInput>
    createMany?: musicsPlaylistsCreateManyPlaylistsInputEnvelope
    set?: Enumerable<musicsPlaylistsWhereUniqueInput>
    disconnect?: Enumerable<musicsPlaylistsWhereUniqueInput>
    delete?: Enumerable<musicsPlaylistsWhereUniqueInput>
    connect?: Enumerable<musicsPlaylistsWhereUniqueInput>
    update?: Enumerable<musicsPlaylistsUpdateWithWhereUniqueWithoutPlaylistsInput>
    updateMany?: Enumerable<musicsPlaylistsUpdateManyWithWhereWithoutPlaylistsInput>
    deleteMany?: Enumerable<musicsPlaylistsScalarWhereInput>
  }

  export type usersCreateNestedOneWithoutSessionsInput = {
    create?: XOR<usersCreateWithoutSessionsInput, usersUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: usersCreateOrConnectWithoutSessionsInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutSessionsInput = {
    create?: XOR<usersCreateWithoutSessionsInput, usersUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: usersCreateOrConnectWithoutSessionsInput
    upsert?: usersUpsertWithoutSessionsInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutSessionsInput, usersUncheckedUpdateWithoutSessionsInput>
  }

  export type playlistsCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<playlistsCreateWithoutUsersInput>, Enumerable<playlistsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<playlistsCreateOrConnectWithoutUsersInput>
    createMany?: playlistsCreateManyUsersInputEnvelope
    connect?: Enumerable<playlistsWhereUniqueInput>
  }

  export type sessionsCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<sessionsCreateWithoutUsersInput>, Enumerable<sessionsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<sessionsCreateOrConnectWithoutUsersInput>
    createMany?: sessionsCreateManyUsersInputEnvelope
    connect?: Enumerable<sessionsWhereUniqueInput>
  }

  export type playlistsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<playlistsCreateWithoutUsersInput>, Enumerable<playlistsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<playlistsCreateOrConnectWithoutUsersInput>
    createMany?: playlistsCreateManyUsersInputEnvelope
    connect?: Enumerable<playlistsWhereUniqueInput>
  }

  export type sessionsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<sessionsCreateWithoutUsersInput>, Enumerable<sessionsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<sessionsCreateOrConnectWithoutUsersInput>
    createMany?: sessionsCreateManyUsersInputEnvelope
    connect?: Enumerable<sessionsWhereUniqueInput>
  }

  export type playlistsUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<playlistsCreateWithoutUsersInput>, Enumerable<playlistsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<playlistsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<playlistsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: playlistsCreateManyUsersInputEnvelope
    set?: Enumerable<playlistsWhereUniqueInput>
    disconnect?: Enumerable<playlistsWhereUniqueInput>
    delete?: Enumerable<playlistsWhereUniqueInput>
    connect?: Enumerable<playlistsWhereUniqueInput>
    update?: Enumerable<playlistsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<playlistsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<playlistsScalarWhereInput>
  }

  export type sessionsUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<sessionsCreateWithoutUsersInput>, Enumerable<sessionsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<sessionsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<sessionsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: sessionsCreateManyUsersInputEnvelope
    set?: Enumerable<sessionsWhereUniqueInput>
    disconnect?: Enumerable<sessionsWhereUniqueInput>
    delete?: Enumerable<sessionsWhereUniqueInput>
    connect?: Enumerable<sessionsWhereUniqueInput>
    update?: Enumerable<sessionsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<sessionsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<sessionsScalarWhereInput>
  }

  export type playlistsUncheckedUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<playlistsCreateWithoutUsersInput>, Enumerable<playlistsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<playlistsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<playlistsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: playlistsCreateManyUsersInputEnvelope
    set?: Enumerable<playlistsWhereUniqueInput>
    disconnect?: Enumerable<playlistsWhereUniqueInput>
    delete?: Enumerable<playlistsWhereUniqueInput>
    connect?: Enumerable<playlistsWhereUniqueInput>
    update?: Enumerable<playlistsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<playlistsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<playlistsScalarWhereInput>
  }

  export type sessionsUncheckedUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<sessionsCreateWithoutUsersInput>, Enumerable<sessionsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<sessionsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<sessionsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: sessionsCreateManyUsersInputEnvelope
    set?: Enumerable<sessionsWhereUniqueInput>
    disconnect?: Enumerable<sessionsWhereUniqueInput>
    delete?: Enumerable<sessionsWhereUniqueInput>
    connect?: Enumerable<sessionsWhereUniqueInput>
    update?: Enumerable<sessionsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<sessionsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<sessionsScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type musicsPlaylistsCreateWithoutMusicsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    playlists: playlistsCreateNestedOneWithoutMusicsPlaylistsInput
  }

  export type musicsPlaylistsUncheckedCreateWithoutMusicsInput = {
    id?: number
    playlistId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type musicsPlaylistsCreateOrConnectWithoutMusicsInput = {
    where: musicsPlaylistsWhereUniqueInput
    create: XOR<musicsPlaylistsCreateWithoutMusicsInput, musicsPlaylistsUncheckedCreateWithoutMusicsInput>
  }

  export type musicsPlaylistsCreateManyMusicsInputEnvelope = {
    data: Enumerable<musicsPlaylistsCreateManyMusicsInput>
    skipDuplicates?: boolean
  }

  export type musicsPlaylistsUpsertWithWhereUniqueWithoutMusicsInput = {
    where: musicsPlaylistsWhereUniqueInput
    update: XOR<musicsPlaylistsUpdateWithoutMusicsInput, musicsPlaylistsUncheckedUpdateWithoutMusicsInput>
    create: XOR<musicsPlaylistsCreateWithoutMusicsInput, musicsPlaylistsUncheckedCreateWithoutMusicsInput>
  }

  export type musicsPlaylistsUpdateWithWhereUniqueWithoutMusicsInput = {
    where: musicsPlaylistsWhereUniqueInput
    data: XOR<musicsPlaylistsUpdateWithoutMusicsInput, musicsPlaylistsUncheckedUpdateWithoutMusicsInput>
  }

  export type musicsPlaylistsUpdateManyWithWhereWithoutMusicsInput = {
    where: musicsPlaylistsScalarWhereInput
    data: XOR<musicsPlaylistsUpdateManyMutationInput, musicsPlaylistsUncheckedUpdateManyWithoutMusicsPlaylistsInput>
  }

  export type musicsPlaylistsScalarWhereInput = {
    AND?: Enumerable<musicsPlaylistsScalarWhereInput>
    OR?: Enumerable<musicsPlaylistsScalarWhereInput>
    NOT?: Enumerable<musicsPlaylistsScalarWhereInput>
    id?: IntFilter | number
    playlistId?: IntFilter | number
    musicsId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type musicsCreateWithoutMusicsPlaylistsInput = {
    name: string
    duration: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type musicsUncheckedCreateWithoutMusicsPlaylistsInput = {
    id?: number
    name: string
    duration: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type musicsCreateOrConnectWithoutMusicsPlaylistsInput = {
    where: musicsWhereUniqueInput
    create: XOR<musicsCreateWithoutMusicsPlaylistsInput, musicsUncheckedCreateWithoutMusicsPlaylistsInput>
  }

  export type playlistsCreateWithoutMusicsPlaylistsInput = {
    name: string
    duration: number
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users: usersCreateNestedOneWithoutPlaylistsInput
  }

  export type playlistsUncheckedCreateWithoutMusicsPlaylistsInput = {
    id?: number
    userId: number
    name: string
    duration: number
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type playlistsCreateOrConnectWithoutMusicsPlaylistsInput = {
    where: playlistsWhereUniqueInput
    create: XOR<playlistsCreateWithoutMusicsPlaylistsInput, playlistsUncheckedCreateWithoutMusicsPlaylistsInput>
  }

  export type musicsUpsertWithoutMusicsPlaylistsInput = {
    update: XOR<musicsUpdateWithoutMusicsPlaylistsInput, musicsUncheckedUpdateWithoutMusicsPlaylistsInput>
    create: XOR<musicsCreateWithoutMusicsPlaylistsInput, musicsUncheckedCreateWithoutMusicsPlaylistsInput>
  }

  export type musicsUpdateWithoutMusicsPlaylistsInput = {
    name?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type musicsUncheckedUpdateWithoutMusicsPlaylistsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type playlistsUpsertWithoutMusicsPlaylistsInput = {
    update: XOR<playlistsUpdateWithoutMusicsPlaylistsInput, playlistsUncheckedUpdateWithoutMusicsPlaylistsInput>
    create: XOR<playlistsCreateWithoutMusicsPlaylistsInput, playlistsUncheckedCreateWithoutMusicsPlaylistsInput>
  }

  export type playlistsUpdateWithoutMusicsPlaylistsInput = {
    name?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: usersUpdateOneRequiredWithoutPlaylistsInput
  }

  export type playlistsUncheckedUpdateWithoutMusicsPlaylistsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersCreateWithoutPlaylistsInput = {
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: sessionsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutPlaylistsInput = {
    id?: number
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: sessionsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutPlaylistsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutPlaylistsInput, usersUncheckedCreateWithoutPlaylistsInput>
  }

  export type musicsPlaylistsCreateWithoutPlaylistsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    musics: musicsCreateNestedOneWithoutMusicsPlaylistsInput
  }

  export type musicsPlaylistsUncheckedCreateWithoutPlaylistsInput = {
    id?: number
    musicsId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type musicsPlaylistsCreateOrConnectWithoutPlaylistsInput = {
    where: musicsPlaylistsWhereUniqueInput
    create: XOR<musicsPlaylistsCreateWithoutPlaylistsInput, musicsPlaylistsUncheckedCreateWithoutPlaylistsInput>
  }

  export type musicsPlaylistsCreateManyPlaylistsInputEnvelope = {
    data: Enumerable<musicsPlaylistsCreateManyPlaylistsInput>
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutPlaylistsInput = {
    update: XOR<usersUpdateWithoutPlaylistsInput, usersUncheckedUpdateWithoutPlaylistsInput>
    create: XOR<usersCreateWithoutPlaylistsInput, usersUncheckedCreateWithoutPlaylistsInput>
  }

  export type usersUpdateWithoutPlaylistsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: sessionsUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateWithoutPlaylistsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: sessionsUncheckedUpdateManyWithoutUsersInput
  }

  export type musicsPlaylistsUpsertWithWhereUniqueWithoutPlaylistsInput = {
    where: musicsPlaylistsWhereUniqueInput
    update: XOR<musicsPlaylistsUpdateWithoutPlaylistsInput, musicsPlaylistsUncheckedUpdateWithoutPlaylistsInput>
    create: XOR<musicsPlaylistsCreateWithoutPlaylistsInput, musicsPlaylistsUncheckedCreateWithoutPlaylistsInput>
  }

  export type musicsPlaylistsUpdateWithWhereUniqueWithoutPlaylistsInput = {
    where: musicsPlaylistsWhereUniqueInput
    data: XOR<musicsPlaylistsUpdateWithoutPlaylistsInput, musicsPlaylistsUncheckedUpdateWithoutPlaylistsInput>
  }

  export type musicsPlaylistsUpdateManyWithWhereWithoutPlaylistsInput = {
    where: musicsPlaylistsScalarWhereInput
    data: XOR<musicsPlaylistsUpdateManyMutationInput, musicsPlaylistsUncheckedUpdateManyWithoutMusicsPlaylistsInput>
  }

  export type usersCreateWithoutSessionsInput = {
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    playlists?: playlistsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutSessionsInput = {
    id?: number
    email: string
    passwordHash: string
    createdAt?: Date | string
    updatedAt?: Date | string
    playlists?: playlistsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutSessionsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutSessionsInput, usersUncheckedCreateWithoutSessionsInput>
  }

  export type usersUpsertWithoutSessionsInput = {
    update: XOR<usersUpdateWithoutSessionsInput, usersUncheckedUpdateWithoutSessionsInput>
    create: XOR<usersCreateWithoutSessionsInput, usersUncheckedCreateWithoutSessionsInput>
  }

  export type usersUpdateWithoutSessionsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playlists?: playlistsUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playlists?: playlistsUncheckedUpdateManyWithoutUsersInput
  }

  export type playlistsCreateWithoutUsersInput = {
    name: string
    duration: number
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    musicsPlaylists?: musicsPlaylistsCreateNestedManyWithoutPlaylistsInput
  }

  export type playlistsUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    duration: number
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
    musicsPlaylists?: musicsPlaylistsUncheckedCreateNestedManyWithoutPlaylistsInput
  }

  export type playlistsCreateOrConnectWithoutUsersInput = {
    where: playlistsWhereUniqueInput
    create: XOR<playlistsCreateWithoutUsersInput, playlistsUncheckedCreateWithoutUsersInput>
  }

  export type playlistsCreateManyUsersInputEnvelope = {
    data: Enumerable<playlistsCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type sessionsCreateWithoutUsersInput = {
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type sessionsUncheckedCreateWithoutUsersInput = {
    id?: number
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type sessionsCreateOrConnectWithoutUsersInput = {
    where: sessionsWhereUniqueInput
    create: XOR<sessionsCreateWithoutUsersInput, sessionsUncheckedCreateWithoutUsersInput>
  }

  export type sessionsCreateManyUsersInputEnvelope = {
    data: Enumerable<sessionsCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type playlistsUpsertWithWhereUniqueWithoutUsersInput = {
    where: playlistsWhereUniqueInput
    update: XOR<playlistsUpdateWithoutUsersInput, playlistsUncheckedUpdateWithoutUsersInput>
    create: XOR<playlistsCreateWithoutUsersInput, playlistsUncheckedCreateWithoutUsersInput>
  }

  export type playlistsUpdateWithWhereUniqueWithoutUsersInput = {
    where: playlistsWhereUniqueInput
    data: XOR<playlistsUpdateWithoutUsersInput, playlistsUncheckedUpdateWithoutUsersInput>
  }

  export type playlistsUpdateManyWithWhereWithoutUsersInput = {
    where: playlistsScalarWhereInput
    data: XOR<playlistsUpdateManyMutationInput, playlistsUncheckedUpdateManyWithoutPlaylistsInput>
  }

  export type playlistsScalarWhereInput = {
    AND?: Enumerable<playlistsScalarWhereInput>
    OR?: Enumerable<playlistsScalarWhereInput>
    NOT?: Enumerable<playlistsScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    name?: StringFilter | string
    duration?: IntFilter | number
    image?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type sessionsUpsertWithWhereUniqueWithoutUsersInput = {
    where: sessionsWhereUniqueInput
    update: XOR<sessionsUpdateWithoutUsersInput, sessionsUncheckedUpdateWithoutUsersInput>
    create: XOR<sessionsCreateWithoutUsersInput, sessionsUncheckedCreateWithoutUsersInput>
  }

  export type sessionsUpdateWithWhereUniqueWithoutUsersInput = {
    where: sessionsWhereUniqueInput
    data: XOR<sessionsUpdateWithoutUsersInput, sessionsUncheckedUpdateWithoutUsersInput>
  }

  export type sessionsUpdateManyWithWhereWithoutUsersInput = {
    where: sessionsScalarWhereInput
    data: XOR<sessionsUpdateManyMutationInput, sessionsUncheckedUpdateManyWithoutSessionsInput>
  }

  export type sessionsScalarWhereInput = {
    AND?: Enumerable<sessionsScalarWhereInput>
    OR?: Enumerable<sessionsScalarWhereInput>
    NOT?: Enumerable<sessionsScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    token?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type musicsPlaylistsCreateManyMusicsInput = {
    id?: number
    playlistId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type musicsPlaylistsUpdateWithoutMusicsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    playlists?: playlistsUpdateOneRequiredWithoutMusicsPlaylistsInput
  }

  export type musicsPlaylistsUncheckedUpdateWithoutMusicsInput = {
    id?: IntFieldUpdateOperationsInput | number
    playlistId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type musicsPlaylistsUncheckedUpdateManyWithoutMusicsPlaylistsInput = {
    id?: IntFieldUpdateOperationsInput | number
    playlistId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type musicsPlaylistsCreateManyPlaylistsInput = {
    id?: number
    musicsId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type musicsPlaylistsUpdateWithoutPlaylistsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    musics?: musicsUpdateOneRequiredWithoutMusicsPlaylistsInput
  }

  export type musicsPlaylistsUncheckedUpdateWithoutPlaylistsInput = {
    id?: IntFieldUpdateOperationsInput | number
    musicsId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type playlistsCreateManyUsersInput = {
    id?: number
    name: string
    duration: number
    image: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type sessionsCreateManyUsersInput = {
    id?: number
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type playlistsUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    musicsPlaylists?: musicsPlaylistsUpdateManyWithoutPlaylistsInput
  }

  export type playlistsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    musicsPlaylists?: musicsPlaylistsUncheckedUpdateManyWithoutPlaylistsInput
  }

  export type playlistsUncheckedUpdateManyWithoutPlaylistsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sessionsUpdateWithoutUsersInput = {
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sessionsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sessionsUncheckedUpdateManyWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}